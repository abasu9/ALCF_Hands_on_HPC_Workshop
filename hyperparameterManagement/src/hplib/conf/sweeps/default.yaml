method: bayes
program: main.py
metric: 
  name: test/acc
  goal: maximize
parameters:
  network.drop1:
    values: [0.1, 0.2, 0.5]
  network.drop2:
    values: [0.1, 0.2, 0.5]
  network.filters1:
    values: [8, 16, 32]
  network.filters2:
    values: [8, 16, 32]
  network.hidden_size:
    values: [8, 64, 128]
  trainer.batch_size:
    values: [64, 256, 512]
command:
  - ${env}
  - ${interpreter}
  - ${program}
  - trainer.epochs=1
  - ${args_no_hyphens}
#   parameters:
#   framework:
#     values: ["pytorch", "tensorflow"]
#   net_weights.x.s:
#     values: [0.0, 1.0]
#   network.units:
#     values:
#       - [16, 16, 16, 16]
#       - [64, 64, 64, 64]
#   network.dropout_prob:
#     values: [0.0, 0.10, 0.5]
#   network.activation_fn:
#     values: ["relu", "leaky_relu", "swish"]
#   annealing_schedule.beta_init:
#     values: [1.0, 2.0, 3.0, 4.0]
#
# command:
#   - ${env}
#   - ${interpreter}
#   - ${program}
#   - steps.nera=10
#   - init_aim=false
#   - steps.nepoch=500
#   - steps.test=2500
#   - dynamics.group=U1
#   - dynamics.nchains=1024
#   - dynamics.latvolume=[16, 16]
#   - dynamics.nleapfrog=8
#   - annealing_schedule.beta_final=4.0
#   - ${args_no_hyphens}
